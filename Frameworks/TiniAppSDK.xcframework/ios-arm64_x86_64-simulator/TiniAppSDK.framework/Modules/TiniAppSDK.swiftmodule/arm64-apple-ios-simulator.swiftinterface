// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TiniAppSDK
import Foundation
import React
import Swift
import UIKit
import _Concurrency
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TiniAppViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension React.RCTBridge {
  convenience public init?(moduleProvider: @escaping React.RCTBridgeModuleListProvider, launchOptions: [Swift.AnyHashable : Any])
}
extension React.RCTRootView {
  @_Concurrency.MainActor(unsafe) convenience public init?(props: [Swift.String : Any])
  @_Concurrency.MainActor(unsafe) convenience public init?(bridge: React.RCTBridge, props: [Swift.String : Any])
}
extension Foundation.Bundle {
  public static func getTiniAppBundle() -> Foundation.URL?
}
